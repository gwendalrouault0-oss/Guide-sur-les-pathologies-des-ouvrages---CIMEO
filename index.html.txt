<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CIMEO Normandie - Diagnostic Structures IA</title>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.20.0/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --cimeo-orange: #FF6B35;
            --cimeo-blue: #1E3A8A;
            --cimeo-black: #1F2937;
            --cimeo-white: #FFFFFF;
            --cimeo-gray: #F8FAFC;
            --cimeo-light-gray: #E2E8F0;
        }

        body {
            font-family: 'Segoe UI', system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, var(--cimeo-blue) 0%, var(--cimeo-black) 100%);
            min-height: 100vh;
            color: var(--cimeo-black);
        }

        .header {
            background: var(--cimeo-white);
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
            padding: 20px;
            text-align: center;
            margin-bottom: 30px;
        }

        .logo {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            margin-bottom: 10px;
        }

        .logo-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(45deg, var(--cimeo-orange), #FF8C42);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            color: var(--cimeo-white);
            font-weight: bold;
        }

        .company-name {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--cimeo-blue);
            letter-spacing: -0.5px;
        }

        .company-tagline {
            color: var(--cimeo-black);
            font-size: 1.1rem;
            opacity: 0.8;
            margin-top: 5px;
        }

        .container {
            max-width: 900px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .main-card {
            background: var(--cimeo-white);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            margin-bottom: 30px;
        }

        .section-title {
            color: var(--cimeo-blue);
            font-size: 1.5rem;
            font-weight: 600;
            text-align: center;
            margin-bottom: 30px;
        }

        .camera-section {
            text-align: center;
            margin-bottom: 30px;
        }

        #webcam {
            width: 100%;
            max-width: 640px;
            height: auto;
            border-radius: 15px;
            border: 3px solid var(--cimeo-orange);
            box-shadow: 0 8px 25px rgba(255, 107, 53, 0.2);
            margin-bottom: 20px;
            background: var(--cimeo-gray);
        }

        #snapshot {
            display: none;
        }

        .upload-area {
            border: 3px dashed var(--cimeo-orange);
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            margin: 20px 0;
            background: var(--cimeo-gray);
            transition: all 0.3s ease;
            display: none;
            cursor: pointer;
            color: var(--cimeo-black);
        }

        .upload-area.show {
            display: block;
        }

        .upload-area:hover {
            border-color: var(--cimeo-blue);
            background: #EBF4FF;
            transform: translateY(-2px);
        }

        .upload-area.dragover {
            border-color: var(--cimeo-blue);
            background: #EBF4FF;
            transform: scale(1.02);
        }

        .upload-area h3 {
            color: var(--cimeo-blue);
            margin-bottom: 10px;
            font-size: 1.3rem;
        }

        .uploaded-image {
            max-width: 100%;
            max-height: 400px;
            border-radius: 15px;
            border: 3px solid var(--cimeo-orange);
            margin: 20px 0;
            box-shadow: 0 8px 25px rgba(255, 107, 53, 0.2);
            display: none;
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
            margin: 30px 0;
        }

        button {
            padding: 14px 28px;
            font-size: 16px;
            font-weight: 600;
            border: none;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 160px;
            position: relative;
            overflow: hidden;
        }

        button:before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        button:hover:before {
            left: 100%;
        }

        .btn-primary {
            background: linear-gradient(45deg, var(--cimeo-orange), #FF8C42);
            color: var(--cimeo-white);
            box-shadow: 0 4px 15px rgba(255, 107, 53, 0.3);
        }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(255, 107, 53, 0.4);
        }

        .btn-secondary {
            background: linear-gradient(45deg, var(--cimeo-blue), #3B82F6);
            color: var(--cimeo-white);
            box-shadow: 0 4px 15px rgba(30, 58, 138, 0.3);
        }

        .btn-secondary:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(30, 58, 138, 0.4);
        }

        .btn-outline {
            background: var(--cimeo-white);
            color: var(--cimeo-black);
            border: 2px solid var(--cimeo-light-gray);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .btn-outline:hover {
            background: var(--cimeo-gray);
            transform: translateY(-3px);
        }

        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

        .status {
            text-align: center;
            margin: 25px 0;
            padding: 20px;
            border-radius: 15px;
            font-weight: 500;
            font-size: 16px;
        }

        .status.loading {
            background: #EBF4FF;
            color: var(--cimeo-blue);
            border: 2px solid #BFDBFE;
        }

        .status.ready {
            background: #ECFDF5;
            color: #059669;
            border: 2px solid #A7F3D0;
        }

        .status.error {
            background: #FEF2F2;
            color: #DC2626;
            border: 2px solid #FECACA;
        }

        .result-section {
            margin-top: 40px;
            padding: 30px;
            border-radius: 20px;
            background: linear-gradient(135deg, var(--cimeo-gray) 0%, var(--cimeo-white) 100%);
            border: 2px solid var(--cimeo-light-gray);
            display: none;
        }

        .result-section.show {
            display: block;
            animation: slideIn 0.6s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .result-header {
            text-align: center;
            margin-bottom: 25px;
        }

        .prediction {
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 15px;
            text-align: center;
        }

        .prediction.safe {
            color: #059669;
        }

        .prediction.danger {
            color: #DC2626;
        }

        .confidence {
            text-align: center;
            font-size: 1.1rem;
            color: var(--cimeo-black);
            opacity: 0.8;
            margin-bottom: 25px;
            white-space: pre-line;
            line-height: 1.6;
        }

        .action-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 25px;
        }

        .pdf-link {
            padding: 14px 28px;
            background: linear-gradient(45deg, #DC2626, #EF4444);
            color: var(--cimeo-white);
            text-decoration: none;
            border-radius: 50px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(220, 38, 38, 0.3);
        }

        .pdf-link:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(220, 38, 38, 0.4);
        }

        .new-analysis-btn {
            background: linear-gradient(45deg, var(--cimeo-blue), #3B82F6);
            color: var(--cimeo-white);
            border: none;
            padding: 14px 28px;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(30, 58, 138, 0.3);
        }

        .new-analysis-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(30, 58, 138, 0.4);
        }

        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid var(--cimeo-orange);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .footer {
            background: var(--cimeo-white);
            margin-top: 50px;
            padding: 30px 20px;
            text-align: center;
            color: var(--cimeo-black);
            opacity: 0.8;
            border-top: 1px solid var(--cimeo-light-gray);
        }

        .footer-content {
            max-width: 800px;
            margin: 0 auto;
        }

        .tech-stack {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        .tech-badge {
            background: var(--cimeo-gray);
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            color: var(--cimeo-black);
            border: 1px solid var(--cimeo-light-gray);
        }

        @media (max-width: 768px) {
            .company-name {
                font-size: 2rem;
            }
            
            .main-card {
                padding: 25px;
                margin: 0 10px;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            button {
                width: 100%;
                max-width: 250px;
            }

            .action-buttons {
                flex-direction: column;
                align-items: center;
            }

            .pdf-link, .new-analysis-btn {
                width: 100%;
                max-width: 250px;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">
            <div class="logo-icon">C</div>
            <div>
                <div class="company-name">CIMEO Normandie</div>
                <div class="company-tagline">Diagnostic de structures par Intelligence Artificielle</div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="main-card">
            <h2 class="section-title">🔍 Analyse de Fissures Structurelles</h2>
            
            <div class="camera-section">
                <video id="webcam" autoplay playsinline muted></video>
                <canvas id="snapshot"></canvas>
                
                <div class="upload-area" id="uploadArea">
                    <div style="font-size: 3rem; margin-bottom: 20px; color: var(--cimeo-orange);">📁</div>
                    <h3>Déposez une image ici ou cliquez pour sélectionner</h3>
                    <p style="margin-top: 10px; opacity: 0.7;">Formats acceptés: JPG, PNG, WebP (max 10MB)</p>
                </div>
                
                <img id="uploadedImage" class="uploaded-image" alt="Image téléchargée">
                
                <div class="controls">
                    <button id="capture" class="btn-primary" disabled>
                        📸 Analyser avec caméra
                    </button>
                    <button id="uploadBtn" class="btn-secondary">
                        📁 Analyser une image
                    </button>
                    <button id="switchCamera" class="btn-outline">
                        🔄 Changer caméra
                    </button>
                    <input type="file" id="fileInput" accept="image/*" style="display: none;">
                </div>
            </div>

            <div id="status" class="status loading">
                <span class="loading-spinner"></span>
                Initialisation du système IA...
            </div>

            <div id="result" class="result-section">
                <div class="result-header">
                    <div id="prediction" class="prediction"></div>
                    <div id="confidence" class="confidence"></div>
                </div>
                
                <div class="action-buttons">
                    <a href="#" id="pdfLink" class="pdf-link" target="_blank" style="display: none;">
                        📋 Télécharger la fiche technique
                    </a>
                    <button id="newAnalysisBtn" class="new-analysis-btn">
                        🔄 Nouvelle analyse
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="footer">
        <div class="footer-content">
            <p><strong>CIMEO Normandie</strong> - Solutions innovantes de diagnostic structurel</p>
            <div class="tech-stack">
                <span class="tech-badge">TensorFlow.js</span>
                <span class="tech-badge">Teachable Machine</span>
                <span class="tech-badge">Intelligence Artificielle</span>
                <span class="tech-badge">Diagnostic Temps Réel</span>
            </div>
            <p style="margin-top: 15px; font-size: 0.9rem;">© 2024 - Technologie de pointe pour l'analyse structurelle</p>
        </div>
    </div>

    <script>
        let model, webcam, canvas, ctx;
        let currentFacingMode = 'user';
        let stream = null;

        // Configuration
        const config = {
            classes: ["Structure saine", "Fissure détectée"],
            pdfs: [
                null, // Pas de PDF pour structure saine
                'documents/fiche_technique_fissuration.pdf'
            ]
        };

        // Éléments DOM
        const elements = {
            webcam: document.getElementById('webcam'),
            canvas: document.getElementById('snapshot'),
            captureBtn: document.getElementById('capture'),
            uploadBtn: document.getElementById('uploadBtn'),
            switchBtn: document.getElementById('switchCamera'),
            fileInput: document.getElementById('fileInput'),
            uploadArea: document.getElementById('uploadArea'),
            uploadedImage: document.getElementById('uploadedImage'),
            status: document.getElementById('status'),
            result: document.getElementById('result'),
            prediction: document.getElementById('prediction'),
            confidence: document.getElementById('confidence'),
            pdfLink: document.getElementById('pdfLink'),
            newAnalysisBtn: document.getElementById('newAnalysisBtn')
        };

        // Initialisation
        async function init() {
            try {
                updateStatus('loading', 'Vérification des composants IA...');
                
                if (typeof tf === 'undefined') {
                    throw new Error('TensorFlow.js non disponible');
                }
                
                if (typeof tmImage === 'undefined') {
                    console.warn('Teachable Machine non disponible, utilisation de TensorFlow.js');
                }

                updateStatus('loading', 'Chargement du modèle de détection...');
                await loadTeachableMachineModel();
                
                updateStatus('loading', 'Configuration de la caméra...');
                await setupWebcam();
                
                updateStatus('ready', '✅ Système prêt ! Sélectionnez votre méthode d\'analyse.');
                
            } catch (error) {
                console.error('Erreur d\'initialisation:', error);
                updateStatus('error', `❌ Erreur: ${error.message}`);
            }
        }

        // Chargement du modèle
        async function loadTeachableMachineModel() {
            try {
                const modelURL = 'https://teachablemachine.withgoogle.com/models/rVulDxd6m/';
                
                console.log('Chargement du modèle:', modelURL);
                
                model = await tmImage.load(modelURL + 'model.json', modelURL + 'metadata.json');
                
                console.log('Modèle chargé avec succès!');
                console.log('Classes:', model.getTotalClasses());
                
                const classLabels = model.getClassLabels();
                if (classLabels && classLabels.length > 0) {
                    config.classes = classLabels;
                    console.log('Classes détectées:', config.classes);
                }
                
            } catch (error) {
                console.error('Erreur modèle:', error);
                
                try {
                    console.log('Tentative avec TensorFlow.js direct...');
                    const alternativeUrls = [
                        'https://teachablemachine.withgoogle.com/models/rVulDxd6m/model.json',
                        'https://storage.googleapis.com/teachablemachine-models/rVulDxd6m/model.json'
                    ];
                    
                    let modelLoaded = false;
                    for (const url of alternativeUrls) {
                        try {
                            console.log('Essai:', url);
                            model = await tf.loadLayersModel(url);
                            modelLoaded = true;
                            break;
                        } catch (urlError) {
                            console.warn('Échec:', url);
                        }
                    }
                    
                    if (!modelLoaded) {
                        throw new Error('Impossible de charger le modèle');
                    }
                    
                    console.log('Modèle chargé avec fallback');
                    
                } catch (fallbackError) {
                    throw new Error(`Erreur de chargement du modèle: ${error.message}`);
                }
            }
        }

        // Configuration webcam
        async function setupWebcam() {
            try {
                canvas = elements.canvas;
                webcam = elements.webcam;
                ctx = canvas.getContext('2d');

                if (!navigator.mediaDevices?.getUserMedia) {
                    throw new Error('Caméra non supportée par ce navigateur');
                }

                const devices = await navigator.mediaDevices.enumerateDevices();
                const videoDevices = devices.filter(device => device.kind === 'videoinput');
                
                if (videoDevices.length === 0) {
                    throw new Error('Aucune caméra détectée');
                }

                console.log(`${videoDevices.length} caméra(s) disponible(s)`);
                await startCamera();
                
            } catch (error) {
                console.error('Erreur webcam:', error);
                throw error;
            }
        }

        // Démarrer caméra
        async function startCamera() {
            let attempts = 0;
            const maxAttempts = 3;

            while (attempts < maxAttempts) {
                try {
                    if (stream) {
                        stream.getTracks().forEach(track => track.stop());
                        stream = null;
                    }

                    const constraints = {
                        video: {
                            facingMode: currentFacingMode,
                            width: { ideal: 640, min: 320 },
                            height: { ideal: 480, min: 240 }
                        }
                    };

                    console.log('Connexion caméra:', attempts + 1);
                    stream = await navigator.mediaDevices.getUserMedia(constraints);
                    webcam.srcObject = stream;

                    await new Promise((resolve, reject) => {
                        let resolved = false;

                        const onSuccess = () => {
                            if (!resolved) {
                                resolved = true;
                                webcam.removeEventListener('loadedmetadata', onSuccess);
                                webcam.removeEventListener('error', onError);
                                resolve();
                            }
                        };

                        const onError = (error) => {
                            if (!resolved) {
                                resolved = true;
                                webcam.removeEventListener('loadedmetadata', onSuccess);
                                webcam.removeEventListener('error', onError);
                                reject(error);
                            }
                        };

                        webcam.addEventListener('loadedmetadata', onSuccess);
                        webcam.addEventListener('error', onError);

                        setTimeout(() => {
                            if (!resolved) {
                                resolved = true;
                                reject(new Error('Timeout caméra'));
                            }
                        }, 10000);
                    });

                    await webcam.play();

                    await new Promise((resolve) => {
                        const checkDimensions = () => {
                            if (webcam.videoWidth > 0 && webcam.videoHeight > 0) {
                                canvas.width = webcam.videoWidth;
                                canvas.height = webcam.videoHeight;
                                console.log(`Caméra: ${webcam.videoWidth}x${webcam.videoHeight}`);
                                elements.captureBtn.disabled = false;
                                resolve();
                            } else {
                                setTimeout(checkDimensions, 100);
                            }
                        };
                        checkDimensions();
                    });

                    console.log('Caméra démarrée');
                    return;

                } catch (error) {
                    attempts++;
                    console.warn(`Tentative ${attempts} échouée:`, error.message);

                    if (attempts >= maxAttempts) {
                        try {
                            stream = await navigator.mediaDevices.getUserMedia({ video: true });
                            webcam.srcObject = stream;
                            await webcam.play();
                            
                            await new Promise(resolve => {
                                const check = () => {
                                    if (webcam.videoWidth > 0) {
                                        canvas.width = webcam.videoWidth;
                                        canvas.height = webcam.videoHeight;
                                        elements.captureBtn.disabled = false;
                                        resolve();
                                    } else {
                                        setTimeout(check, 100);
                                    }
                                };
                                check();
                            });
                            
                            console.log('Caméra démarrée (fallback)');
                            return;
                            
                        } catch (fallbackError) {
                            throw new Error(`Impossible de démarrer la caméra après ${maxAttempts} tentatives`);
                        }
                    }

                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
        }

        // Analyse d'image
        async function analyzeImage(imageSource = 'camera') {
            if (!model) {
                alert('Modèle non chargé. Veuillez patienter.');
                return;
            }

            try {
                let sourceElement;
                
                if (imageSource === 'camera') {
                    if (!webcam?.videoWidth) {
                        alert('Caméra non prête. Veuillez patienter.');
                        return;
                    }
                    sourceElement = webcam;
                    elements.captureBtn.disabled = true;
                    elements.captureBtn.textContent = '🔍 Analyse en cours...';
                } else {
                    sourceElement = elements.uploadedImage;
                    if (!sourceElement.src || sourceElement.style.display === 'none') {
                        alert('Veuillez d\'abord sélectionner une image.');
                        return;
                    }
                    elements.uploadBtn.disabled = true;
                    elements.uploadBtn.textContent = '🔍 Analyse en cours...';
                }

                updateStatus('loading', '🔬 Analyse de la structure en cours...');

                canvas.width = sourceElement.naturalWidth || sourceElement.videoWidth || 640;
                canvas.height = sourceElement.naturalHeight || sourceElement.videoHeight || 480;
                
                ctx.drawImage(sourceElement, 0, 0, canvas.width, canvas.height);

                let predictions;
                
                if (model.predict && typeof model.getTotalClasses === 'function') {
                    console.log('Analyse Teachable Machine');
                    predictions = await model.predict(canvas);
                } else {
                    console.log('Analyse TensorFlow.js');
                    const imageTensor = tf.browser.fromPixels(canvas)
                        .resizeNearestNeighbor([224, 224])
                        .expandDims(0)
                        .toFloat()
                        .div(255.0);

                    const rawPredictions = await model.predict(imageTensor).data();
                    imageTensor.dispose();
                    
                    predictions = Array.from(rawPredictions).map((prob, index) => ({
                        className: config.classes[index] || `Classe ${index}`,
                        probability: prob
                    }));
                }

                console.log('Prédictions:', predictions);

                let maxIndex = 0;
                let maxProb = 0;
                
                if (Array.isArray(predictions)) {
                    predictions.forEach((pred, index) => {
                        const prob = pred.probability || pred;
                        if (prob > maxProb) {
                            maxProb = prob;
                            maxIndex = index;
                        }
                    });
                }

                console.log('Résultat:', {
                    classe: config.classes[maxIndex],
                    index: maxIndex,
                    confiance: maxProb
                });

                displayResults(maxIndex, maxProb, predictions);

            } catch (error) {
                console.error('Erreur d\'analyse:', error);
                updateStatus('error', `❌ Erreur d'analyse: ${error.message}`);
                alert('Erreur lors de l\'analyse: ' + error.message);
            } finally {
                elements.captureBtn.disabled = false;
                elements.captureBtn.textContent = '📸 Analyser avec caméra';
                elements.uploadBtn.disabled = false;
                elements.uploadBtn.textContent = '📁 Analyser une image';
            }
        }

        // Gestion upload
        function setupImageUpload() {
            elements.uploadBtn.addEventListener('click', () => {
                if (elements.uploadedImage.style.display === 'block') {
                    analyzeImage('upload');
                } else {
                    elements.fileInput.click();
                }
            });

            elements.uploadArea.addEventListener('click', () => {
                elements.fileInput.click();
            });

            elements.uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                elements.uploadArea.classList.add('dragover');
            });

            elements.uploadArea.addEventListener('dragleave', () => {
                elements.uploadArea.classList.remove('dragover');
            });

            elements.uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                elements.uploadArea.classList.remove('dragover');
                
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleImageFile(files[0]);
                }
            });

            elements.fileInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    handleImageFile(e.target.files[0]);
                }
            });
        }

        // Traiter fichier image
        function handleImageFile(file) {
            if (!file.type.startsWith('image/')) {
                alert('Veuillez sélectionner un fichier image (JPG, PNG, WebP).');
                return;
            }

            if (file.size > 10 * 1024 * 1024) {
                alert('Fichier trop volumineux (max 10MB).');
                return;
            }

            const reader = new FileReader();
            
            reader.onload = (e) => {
                elements.uploadedImage.src = e.target.result;
                elements.uploadedImage.style.display = 'block';
                elements.uploadArea.style.display = 'none';
                elements.webcam.style.display = 'none';
                
                elements.uploadBtn.textContent = '🔍 Analyser cette image';
                
                updateStatus('ready', '✅ Image chargée ! Cliquez sur "Analyser cette image".');
                elements.result.classList.remove('show');
            };

            reader.onerror = () => {
                alert('Erreur lors du chargement de l\'image.');
            };

            reader.readAsDataURL(file);
        }

        // Nouvelle analyse
        function startNewAnalysis() {
            // Masquer les résultats
            elements.result.classList.remove('show');
            
            // Réinitialiser l'interface
            elements.webcam.style.display = 'block';
            elements.uploadArea.style.display = 'none';
            elements.uploadedImage.style.display = 'none';
            
            // Réinitialiser les boutons
            elements.uploadBtn.textContent = '📁 Analyser une image';
            elements.captureBtn.textContent = '📸 Analyser avec caméra';
            
            // Réinitialiser le file input
            elements.fileInput.value = '';
            
            updateStatus('ready', '✅ Système prêt ! Sélectionnez votre méthode d\'analyse.');
        }

        // Changer caméra
        async function switchCamera() {
            try {
                elements.switchBtn.disabled = true;
                elements.switchBtn.textContent = '🔄 Changement...';
                updateStatus('loading', 'Changement de caméra...');
                
                const devices = await navigator.mediaDevices.enumerateDevices();
                const videoDevices = devices.filter(device => device.kind === 'videoinput');
                
                if (videoDevices.length < 2) {
                    throw new Error('Une seule caméra disponible');
                }
                
                currentFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
                await startCamera();
                
                updateStatus('ready', '✅ Caméra changée avec succès !');
                
            } catch (error) {
                console.error('Erreur changement caméra:', error);
                currentFacingMode = currentFacingMode === 'user' ? 'environment' : 'user';
                updateStatus('error', `Impossible de changer de caméra: ${error.message}`);
            } finally {
                elements.switchBtn.disabled = false;
                elements.switchBtn.textContent = '🔄 Changer caméra';
            }
        }

        // Afficher résultats
        function displayResults(classIndex, confidence, allPredictions) {
            const className = config.classes[classIndex] || `Classe ${classIndex}`;
            const confidencePercent = (confidence * 100).toFixed(1);
            const isCrackDetected = classIndex === 1 || 
                                  className.toLowerCase().includes('fissure') || 
                                  className.toLowerCase().includes('crack');

            // Afficher le résultat
            if (isCrackDetected) {
                elements.prediction.textContent = "⚠️ FISSURATION DÉTECTÉE";
                elements.prediction.className = 'prediction danger';
            } else {
                elements.prediction.textContent = "✅ AUCUNE PATHOLOGIE DÉTECTÉE";
                elements.prediction.className = 'prediction safe';
            }
            
            // Construire le texte de confiance
            let confidenceText = `Niveau de confiance: ${confidencePercent}%`;
            
            if (allPredictions && allPredictions.length > 1) {
                confidenceText += '\n\nDétail de l\'analyse:\n';
                
                allPredictions.forEach((pred, index) => {
                    let percent, name;
                    
                    if (pred.probability !== undefined) {
                        percent = (pred.probability * 100).toFixed(1);
                        name = pred.className || config.classes[index] || `Classe ${index}`;
                    } else {
                        percent = (pred * 100).toFixed(1);
                        name = config.classes[index] || `Classe ${index}`;
                    }
                    
                    confidenceText += `• ${name}: ${percent}%\n`;
                });
            }
            
            if (isCrackDetected) {
                confidenceText += '\n\n📋 DIAGNOSTIC TECHNIQUE :\n';
                confidenceText += '• Classification : Fissuration structurelle potentielle\n';
                confidenceText += '• Référence normative : EUROCODE 2 - Calcul des structures en béton\n';
                confidenceText += '• Action requise : Évaluation par expert qualifié\n';
                confidenceText += '• Urgence : Selon localisation et ouverture des fissures';
            } else {
                confidenceText += '\n\n✅ ÉVALUATION :\n';
                confidenceText += '• État structurel : Conforme\n';
                confidenceText += '• Pathologies visibles : Aucune\n';
                confidenceText += '• Recommandation : Surveillance périodique maintenue';
            }
            
            elements.confidence.textContent = confidenceText;
            
            // Gérer le lien PDF (seulement si fissure détectée)
            if (isCrackDetected) {
                elements.pdfLink.href = 'documents/fiche_technique_fissuration.pdf';
                elements.pdfLink.textContent = '📋 Télécharger la fiche technique - Fissuration';
                elements.pdfLink.style.display = 'inline-block';
            } else {
                elements.pdfLink.style.display = 'none';
            }

            // Afficher la section résultats
            elements.result.classList.add('show');
            
            // Message de statut approprié
            if (isCrackDetected) {
                updateStatus('error', '⚠️ Pathologie détectée ! Intervention recommandée - Consultez la fiche technique.');
            } else {
                updateStatus('ready', '✅ Structure conforme - Aucune pathologie détectée.');
            }
            
            // Scroll vers les résultats
            setTimeout(() => {
                elements.result.scrollIntoView({ behavior: 'smooth', block: 'center' });
            }, 200);
        }

        // Mettre à jour statut
        function updateStatus(type, message) {
            elements.status.className = `status ${type}`;
            elements.status.innerHTML = type === 'loading' ? 
                `<span class="loading-spinner"></span>${message}` : 
                message;
        }

        // Event listeners
        elements.captureBtn.addEventListener('click', () => analyzeImage('camera'));
        elements.switchBtn.addEventListener('click', switchCamera);
        elements.newAnalysisBtn.addEventListener('click', startNewAnalysis);

        // Initialiser upload
        setupImageUpload();

        // Initialisation au chargement
        document.addEventListener('DOMContentLoaded', init);

        // Nettoyage à la fermeture
        window.addEventListener('beforeunload', () => {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
            }
        });
    </script>
</body>
</html>